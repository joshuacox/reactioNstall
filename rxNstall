#!/usr/bin/env bash
TMP_DIR=$(mktemp -d --suffix='.reactioNstall.tmp' 2>/dev/null || mktemp -d -t '.reactioNstall.tmp')
: ${METEOR_VERSION:=1.6.0.1}
: ${VERBOSITY:=0}

killtmp () {
  cd
  rm -Rf $TMP_DIR
}
trap killtmp EXIT

# Check if a command exists
check_cmd () {
  if ! type "$1" > /dev/null; then
    errror
    echo "$1 was not found in your path!"
    echo "To proceed please install $1 to your path and try again!"
    exit 1
  fi
}

chkdir () {
  if [ ! -w $1 ] ; then
    sudo mkdir -p $1
    sudo chown $USER. $1
  fi
  if [ ! -w $1 ] ; then
    errror
    echo "Cannot write to $1, please check your permissions"
    exit 2
  fi
}

reaction_full_test () {
  cd $TMP_DIR
  reaction help
  if [[ $VERBOSITY -gt '2' ]]; then
    echo init reaction
  fi
  reaction init
  cd reaction
  if [[ $VERBOSITY -gt '2' ]]; then
    echo test reaction
  fi
  reaction test
  cd
}

# these vars are used by the following functions
LINE_TO_ADD=''
TARGET_FILE_FOR_ADD=~/.profile

check_if_line_exists()
{
  if [[ $VERBOSITY -gt '7' ]]; then
    echo "Checking for '$LINE_TO_ADD'  in $TARGET_FILE_FOR_ADD"
  fi
  grep -qsFx "$LINE_TO_ADD" $TARGET_FILE_FOR_ADD
}

add_line_to()
{
  if [[ $VERBOSITY -gt '5' ]]; then
    echo "Adding '$LINE_TO_ADD'  to $TARGET_FILE_FOR_ADD"
  fi
  TARGET_FILE=$TARGET_FILE_FOR_ADD
    [ -w "$TARGET_FILE" ] || TARGET_FILE=$TARGET_FILE_FOR_ADD
    printf "%s\n" "$LINE_TO_ADD" >> "$TARGET_FILE"
}

install_nvm () {
  touch ~/.profile

  if [ "$FIX_NVM_PREFIX" = "true" ]; then
    if [[ $VERBOSITY -gt '1' ]]; then
      echo 'npm config delete prefix'
    fi
    npm config delete prefix
  fi

  if [ "$FIX_DOTFILES" = "true" ]; then
    dotfiles_install
  fi

  curl --silent -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.8/install.sh | bash

  if [ "$NVM_DIR_ADDS" = "true" ]; then
    nvm_dir_adds
  fi

}

install_meteor () {
  LINE_TO_ADD='export PATH=~/.meteor:$PATH'
  TARGET_FILE_FOR_ADD=~/.bashrc
  check_if_line_exists || add_line_to
  TARGET_FILE_FOR_ADD=~/.zshrc
  check_if_line_exists || add_line_to
  if [[ $VERBOSITY -gt '2' ]]; then
  echo 'Checking meteor...'
  fi
  PATH=~/.meteor:$PATH
  if ! type "meteor" > /dev/null; then
    curl --silent https://install.meteor.com/ | sh
  else
    if [[ $VERBOSITY -gt '1' ]]; then
      echo 'Meteor appears to be installed already, using that'
      which meteor
      echo 'if there are issues try removing that installed meteor'
    fi
  fi
}

lts_install () {
  if [[ $VERBOSITY -gt '2' ]]; then
    echo 'Installing Node 8 LTS/carbon'
  fi

  export NVM_DIR="$HOME/.nvm"
  [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
  [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

  nvm ls-remote --lts
  if [[ $VERBOSITY -gt '2' ]]; then
    echo "Engage nvm to install lts/carbon"
  fi
  nvm install --lts
  if [[ $VERBOSITY -gt '2' ]]; then
    echo "Engage nvm to alias lts/carbon to default"
  fi
  nvm alias default lts/carbon
}

reaction_install () {
  install_meteor

  if [[ $VERBOSITY -gt '2' ]]; then
    echo 'Check npm and node are present'
  fi
  check_cmd npm
  check_cmd node
  chkdir $HOME/.nvm

  if [[ $VERBOSITY -gt '3' ]]; then
    echo -n 'npm version: '
    npm -v
    which npm
    echo -n 'node version: '
    node -v
    which node
    echo 'Installing reaction-cli'
  fi
  npm i -g reaction-cli
  if [[ $VERBOSITY -gt '1' ]]; then
    echo 'reaction-cli has been installed...'
  fi
}

nvm_dir_adds () {
  LINE_TO_ADD='export NVM_DIR=~/.nvm'
  TARGET_FILE_FOR_ADD=~/.zshrc
  check_if_line_exists || add_line_to
  TARGET_FILE_FOR_ADD=~/.bash_profile
  check_if_line_exists || add_line_to

  LINE_TO_ADD='source ~/.nvm/nvm.sh'
  TARGET_FILE_FOR_ADD=~/.zshrc
  check_if_line_exists || add_line_to
  TARGET_FILE_FOR_ADD=~/.bash_profile
  check_if_line_exists || add_line_to
}

dotfiles_install () {
  if [[ $VERBOSITY -gt '1' ]]; then
    echo 'Adjusting dotfiles'
  fi
  touch ~/.zshrc
  touch ~/.bashrc
  touch ~/.bash_profile
  touch ~/.profile
  LINE_TO_ADD="source ~/.bashrc"
  TARGET_FILE_FOR_ADD=~/.bash_profile
  check_if_line_exists || add_line_to
  LINE_TO_ADD="source ~/.profile"
  TARGET_FILE_FOR_ADD=~/.zshrc
  check_if_line_exists || add_line_to
  TARGET_FILE_FOR_ADD=~/.bashrc
  check_if_line_exists || add_line_to
}

osx_install () {
  if [[ $VERBOSITY -gt '1' ]]; then
    echo "Installing NVM on OSX"
  fi

  install_nvm

  lts_install

  reaction_install
}

linux_install () {
  if [[ $VERBOSITY -gt '1' ]]; then
    echo "Installing NVM on Linux"
  fi

  install_nvm

  lts_install

  reaction_install
}

freebsd_install () {
  if [[ $VERBOSITY -gt '1' ]]; then
    echo "Installing NVM on FreeBSD"
  fi

  install_nvm

  lts_install

  reaction_install
}

#### taking some cues directly from the meteor install script
#### my comments will have four shi '####'

# We wrap this whole script in a function, so that we won't execute
# until the entire script is downloaded.
# That's good because it prevents our output overlapping with curl's.
# It also means that we can't run a partially downloaded script.
# We don't indent because it would be really confusing with the heredocs.
run_it () {
# Let's display everything on stderr.
exec 1>&2

UNAME=$(uname)

if [ "$UNAME" = "CYGWIN_NT-10.0" ] ; then
  check_cmd choco
  check_cmd helm
  PLATFORM="os.cygwin.x86_64"
  echo "WARNING: Cygwin is not supported for this installer at this time!"
  exit 1
fi

if [ "$UNAME" == "Linux" -o "$UNAME" == "Darwin" ] -o "$UNAME" == "FreeBSD"  ; then
  if [[ $VERBOSITY -gt '1' ]]; then
    echo " $UNAME is a Supported OS"
  fi
elif [ "$UNAME" ">" "MINGW" -a "$UNAME" "<" "MINGX" ] ; then
  if [[ $VERBOSITY -gt '1' ]]; then
    echo " $UNAME is a Supported OS"
  fi
else
  echo " $UNAME is not a Supported OS"
  echo "Sorry, this OS is not supported yet via this installer."
  exit 1
fi

# Check to see if it starts with MINGW.
if [ "$UNAME" ">" "MINGW" -a "$UNAME" "<" "MINGX" ] ; then
  check_cmd choco
  check_cmd helm
  PLATFORM="os.windows.x86_64"
  echo "WARNING: Windows is experimental for this installer at this time!"
fi

if [ "$UNAME" = "Darwin" ] ; then
  check_cmd brew
  ### OSX ###
  if [ "i386" != "$(uname -p)" -o "1" != "$(sysctl -n hw.cpu64bit_capable 2>/dev/null || echo 0)" ] ; then
    # Can't just test uname -m = x86_64, because Snow Leopard can
    # return other values.
    echo "Only 64-bit Intel processors are supported at this time in OSX."
    exit 1
  fi

  PLATFORM="os.osx.x86_64"
elif [ "$UNAME" = "Linux" ] ; then
  ### Linux ###
  LINUX_ARCH=$(uname -m)
  if [ "${LINUX_ARCH}" = "x86_64" ] ; then
    PLATFORM="os.linux.x86_64"
  else
    echo "Unusable architecture: ${LINUX_ARCH}"
    echo "ReactioNstall only supports x86_64 for now on Linux."
    exit 1
  fi
elif [ "$UNAME" = "FreeBSD" ] ; then
  ### FreeBSD ###
  FREEBSD_ARCH=$(uname -m)
  if [ "${FREEBSD_ARCH}" = "amd64" ] ; then
    PLATFORM="os.freebsd.amd64"
  else
    echo "Unusable architecture: ${FREEBSD_ARCH}"
    echo "rxNstall only supports amd64 for now on FreeBSD."
    exit 1
  fi
fi


# make reqs
if [ "$PLATFORM" = "os.linux.x86_64" ] ; then
  linux_install
elif [ "$PLATFORM" = "os.freebsd.amd64" ] ; then
  freebsd_install
elif [ "$PLATFORM" = "os.osx.x86_64" ] ; then
  osx_install
elif [ "$PLATFORM" = "os.windows.x86_64" ] ; then
  echo windows is not support yet
  exit 1
fi

#reaction_full_test
if [[ $VERBOSITY -gt '1' ]]; then
  reaction help
fi
echo 'rxNstall has finished'
echo ''
echo 'Notice you should open a new terminal now or `source .bashrc` now'

if [ "$REACTION_FULL_TEST" = "true" ]; then
  reaction_full_test
fi

exit 0
# End run it wrapper
}

check_cmd mktemp
check_cmd git
check_cmd curl
check_cmd uname
check_cmd 'grep'
check_cmd 'sed'


run_it

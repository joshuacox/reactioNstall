#!/bin/bash
TMP_DIR=$(mktemp -d --suffix='.reactioNstall.tmp' 2>/dev/null || mktemp -d -t '.reactioNstall.tmp')
METEOR_VERSION=${METEOR_VERSION:-1.6.0.1}
TERM=${TERM:-screen-256color}
COLORTERM=${COLORTERM:-gnome-256color}
PS1="(rxnstall) ${PS1}"

killtmp () {
  cd
#  restore_bashrc
  rm -Rf $TMP_DIR
}
trap killtmp EXIT

# Check if a command exists
check_cmd () {
  if ! type "$1" > /dev/null; then
    errror
    echo "$1 was not found in your path!"
    echo "To proceed please install $1 to your path and try again!"
    exit 1
  fi
}

chkdir () {
  if [ ! -w $1 ] ; then
    sudo mkdir -p $1
    sudo chown $USER. $1
  fi
  if [ ! -w $1 ] ; then
    errror
    echo "Cannot write to $1, please check your permissions"
    exit 2
  fi
}

reaction_full_test () {
  cd $TMP_DIR
  reaction help
  echo init reaction
  reaction init
  cd reaction
  echo test reaction
  reaction test
  cd
}

LINE_TO_ADD=''
TARGET_FILE_FOR_ADD=~/.profile

check_if_line_exists()
{
  echo "Checking for '$LINE_TO_ADD'  in $TARGET_FILE_FOR_ADD"
  grep -qsFx "$LINE_TO_ADD" $TARGET_FILE_FOR_ADD
}

add_line_to()
{
  echo "Adding '$LINE_TO_ADD'  to $TARGET_FILE_FOR_ADD"
  TARGET_FILE=$TARGET_FILE_FOR_ADD
    [ -w "$TARGET_FILE" ] || TARGET_FILE=$TARGET_FILE_FOR_ADD
    printf "%s\n" "$LINE_TO_ADD" >> "$TARGET_FILE"
}

install_nvm () {
  echo "installing nvm"
  touch ~/.profile
  curl --silent -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.8/install.sh | bash

  if [ $FIX_DOTFILES = 'true' ]; then
    dotfiles_install
  fi

  if [ $NVM_DIR_ADDS = 'true' ]; then
    nvm_dir_adds
  fi

  if [ $FIX_NVM_PREFIX = 'true' ]; then
    echo 'npm config delete prefix'
    npm config delete prefix
  fi
}

install_meteor () {
  echo 'Installing meteor'
  #curl --silent -L https://raw.githubusercontent.com/reactioncommerce/base/master/scripts/install-meteor.sh | bash -l
  curl --silent https://install.meteor.com/ | sh
  LINE_TO_ADD='export PATH=~/.meteor:$PATH'
  TARGET_FILE_FOR_ADD=~/.bash_profile
  check_if_line_exists || add_line_to
  TARGET_FILE_FOR_ADD=~/.zshrc
  check_if_line_exists || add_line_to
}

lts_install () {
  echo 'Installing Node 8 LTS/carbon'

  export NVM_DIR="$HOME/.nvm"
  [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
  [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

  nvm ls-remote --lts
  echo "Engage nvm to install lts/carbon"
  nvm install --lts
  echo "Engage nvm to alias lts/carbon to default"
  nvm alias default lts/carbon
}

reaction_install () {
  install_meteor

  echo 'Check npm and node are present'
  check_cmd npm
  check_cmd node
  chkdir $HOME/.nvm

  echo -n 'npm version: '
  npm -v
  echo -n 'node version: '
  node -v

  echo 'Installing reaction-cli'
  npm i -g reaction-cli
  echo 'reaction-cli has been installed...'
}

nvm_dir_adds () {
  LINE_TO_ADD='export NVM_DIR=~/.nvm'
  TARGET_FILE_FOR_ADD=~/.zshrc
  check_if_line_exists || add_line_to
  TARGET_FILE_FOR_ADD=~/.bash_profile
  check_if_line_exists || add_line_to

  LINE_TO_ADD='source ~/.nvm/nvm.sh'
  TARGET_FILE_FOR_ADD=~/.zshrc
  check_if_line_exists || add_line_to
  TARGET_FILE_FOR_ADD=~/.bash_profile
  check_if_line_exists || add_line_to
}

dotfiles_install () {
  echo 'Adjusting dotfiles'
  touch ~/.zshrc
  touch ~/.bashrc
  touch ~/.bash_profile
  touch ~/.profile
  LINE_TO_ADD='source ~/.profile'
  TARGET_FILE_FOR_ADD=~/.bashrc
  check_if_line_exists || add_line_to
  TARGET_FILE_FOR_ADD=~/.zshrc
  check_if_line_exists || add_line_to
  TARGET_FILE_FOR_ADD=~/.bash_profile
  check_if_line_exists || add_line_to
}

osx_install () {
  echo "Installing NVM on OSX"

  install_nvm


  lts_install

  reaction_install
}

linux_install () {
  echo "Installing NVM on Linux"

  install_nvm

  lts_install

  reaction_install
}

# taking some cues directly from the meteor install script

# We wrap this whole script in a function, so that we won't execute
# until the entire script is downloaded.
# That's good because it prevents our output overlapping with curl's.
# It also means that we can't run a partially downloaded script.
# We don't indent because it would be really confusing with the heredocs.
run_it () {

# Now, on to the actual installer!

#### Note: NVM is a bash function so I'm sticking to bash for this one
## NOTE sh NOT bash. This script should be POSIX sh only, since we don't
## know what shell the user has. Debian uses 'dash' for 'sh', for
## example.

#### NVM is not compatible with -e and -u
#### see:
#### https://github.com/creationix/nvm/issues/865#issuecomment-146948066
####set -e
####set -u

# Let's display everything on stderr.
exec 1>&2

UNAME=$(uname)

if [ "$UNAME" = "CYGWIN_NT-10.0" ] ; then
  check_cmd choco
  check_cmd helm
  PLATFORM="os.cygwin.x86_64"
  echo "WARNING: Cygwin is not supported for this installer at this time!"
  exit 1
fi

if [ "$UNAME" == "Linux" -o "$UNAME" == "Darwin" ] ; then
  echo " $UNAME is a Supported OS"
elif [ "$UNAME" ">" "MINGW" -a "$UNAME" "<" "MINGX" ] ; then
  echo " $UNAME is a Supported OS"
else
  echo " $UNAME is not a Supported OS"
  echo "Sorry, this OS is not supported yet via this installer."
  exit 1
fi

# Check to see if it starts with MINGW.
if [ "$UNAME" ">" "MINGW" -a "$UNAME" "<" "MINGX" ] ; then
  check_cmd choco
  check_cmd helm
  PLATFORM="os.windows.x86_64"
  echo "WARNING: Windows is experimental for this installer at this time!"
fi

if [ "$UNAME" = "Darwin" ] ; then
  check_cmd brew
  ### OSX ###
  if [ "i386" != "$(uname -p)" -o "1" != "$(sysctl -n hw.cpu64bit_capable 2>/dev/null || echo 0)" ] ; then
    # Can't just test uname -m = x86_64, because Snow Leopard can
    # return other values.
    echo "Only 64-bit Intel processors are supported at this time in OSX."
    exit 1
  fi

  PLATFORM="os.osx.x86_64"
  echo "WARNING: OSX is experimental for this installer at this time!"
elif [ "$UNAME" = "Linux" ] ; then
  ### Linux ###
  LINUX_ARCH=$(uname -m)
  if [ "${LINUX_ARCH}" = "x86_64" ] ; then
    PLATFORM="os.linux.x86_64"
  else
    echo "Unusable architecture: ${LINUX_ARCH}"
    echo "ReactioNstall only supports x86_64 for now."
    exit 1
  fi
fi


# make reqs
if [ "$PLATFORM" = "os.linux.x86_64" ] ; then
  echo linux
  linux_install
elif [ "$PLATFORM" = "os.osx.x86_64" ] ; then
  echo osx
  osx_install
elif [ "$PLATFORM" = "os.windows.x86_64" ] ; then
  echo windows is not support yet
  exit 1
fi

#reaction_full_test
reaction help
echo 'rxNstall has finished'

if [ $REACTION_FULL_TEST = 'true' ]; then
  reaction_full_test
fi

exit 0
# End run it wrapper
}

check_cmd mktemp
check_cmd git
check_cmd curl
check_cmd uname
check_cmd 'grep'
check_cmd 'sed'


run_it
